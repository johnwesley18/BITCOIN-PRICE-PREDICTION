# -*- coding: utf-8 -*-
"""BITCOIN PRICE ANALYSIS WITH ARIMA MODEL 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mJLZ239hkhfx3IxfkuBA_gTuaVilGjXK
"""

pip install yfinance

import yfinance as yf

df = yf.download('BTC-USD')

df

import numpy as np, pandas as pd, matplotlib.pyplot as plt
import math
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error, mean_absolute_error

plt.plot(df.index, df['Adj Close'])
plt.show()

to_row = int(len(df)*0.9)

training_data = list(df[0:to_row]['Adj Close'])
testing_data = list(df[to_row:]['Adj Close'])

plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Dates')
plt.ylabel('Closing Prices')
plt.plot(df[0:to_row]['Adj Close'], 'green', label='Train data')
plt.plot(df[to_row:]['Adj Close'], 'blue', label='Test data')
plt.legend()

model_predictions = []
n_test_obser = len(testing_data)

for i in range(n_test_obser):
  model = ARIMA(training_data, order = (4,1,0))
  model_fit = model.fit()
  output = model_fit.forecast()
  yhat = output[0]
  model_predictions.append(yhat)
  actual_test_value = testing_data[i]
  training_data.append(actual_test_value)

list([output[0]])

print(model_fit.summary())

len(testing_data)

model_predictions[:-1]

plt.figure(figsize=(15,9))
plt.grid(True)
date_range = df[to_row:].index
plt.plot(date_range, model_predictions, color='blue', marker='o', linestyle='dashed', label='BTC predicted price')
plt.plot(date_range, testing_data, color='red', label='BTC Actual Price')
plt.title('Bitcoin Price Prediction')
plt.xlabel('Date')
plt.legend()
plt.show()

# report performance
mape = np.mean(np.abs(np.array(model_predictions) - np.array(testing_data))/np.abs(testing_data))
print('MAPE: '+str(mape))

#final predictions of the model
MAPE is a percentage error metric where the value corresponds to the average amount of error that predictions have.
...
MAPE	Interpretation
< 10 %	Very good
10 % - 20 %	Good
20 % - 50 %	OK
> 50 %	Not good

OUR MODEL MAPE VALUE IS MAPE: 0.0207359643973845

rmse = mean_squared_error(testing_data, model_predictions[:-1], squared=False)
mae = mean_absolute_error(testing_data, model_predictions[:-1])
print(rmse)
print(mae)